name: Deploy

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build-release:
    needs: create-release
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact_name: rust-webapp
            asset_name: rust-webapp-linux
          - os: windows-latest
            artifact_name: rust-webapp.exe
            asset_name: rust-webapp-windows.exe
          - os: macos-latest
            artifact_name: rust-webapp
            asset_name: rust-webapp-macos
    
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      - name: Build Release
        run: cargo build --release
      
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./target/release/${{ matrix.artifact_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream

  deploy-prod:
    needs: [build-release]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download release artifact
        uses: actions/download-artifact@v3
        with:
          name: rust-webapp-linux
          path: ./target/release/
      
      - name: Deploy to production
        env:
          DEPLOY_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
          SERVER_IP: ${{ secrets.PROD_SERVER_IP }}
          DEPLOY_USER: ${{ secrets.PROD_USER }}
        run: |
          # Setup SSH
          echo "$DEPLOY_KEY" > deploy_key
          chmod 600 deploy_key
          mkdir -p ~/.ssh
          ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts
          
          # Create required directories
          ssh -i deploy_key $DEPLOY_USER@$SERVER_IP "mkdir -p /opt/rust-webapp/config"
          
          # Copy application files
          scp -i deploy_key ./target/release/rust-webapp $DEPLOY_USER@$SERVER_IP:/opt/rust-webapp/
          scp -i deploy_key ./config/app.config.example.toml $DEPLOY_USER@$SERVER_IP:/opt/rust-webapp/config/app.config.toml
          scp -i deploy_key ./docker/nginx.conf $DEPLOY_USER@$SERVER_IP:/etc/nginx/conf.d/rust-webapp.conf
          
          # Update service file and restart
          scp -i deploy_key ./docker/rust-webapp.service $DEPLOY_USER@$SERVER_IP:/etc/systemd/system/
          ssh -i deploy_key $DEPLOY_USER@$SERVER_IP "sudo systemctl daemon-reload && sudo systemctl restart rust-webapp && sudo systemctl restart nginx"
          
          # Cleanup
          rm deploy_key
