name: CI/CD

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: write
  packages: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Clippy
        run: cargo clippy -- -D warnings

      - name: Run tests
        run: cargo test

  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/'))
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Save Docker image name
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "IMAGE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "FULL_IMAGE_NAME=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
      issues: write
      pull-requests: write
    outputs:
      release_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            git log --pretty=format:"* %s" > CHANGELOG.md
          else
            git log --pretty=format:"* %s" $PREVIOUS_TAG..HEAD > CHANGELOG.md
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false

  deploy:
    name: Deploy to Production
    needs: [build, release]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    environment: 
      name: production
      url: https://quizmo.me
    concurrency: production
    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            # Update application code
            cd ~/CascadeProjects/rust-webapp
            git fetch --all
            git checkout ${GITHUB_REF#refs/tags/}

            # Pull latest Docker image
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            docker pull ${{ env.FULL_IMAGE_NAME }}

            # Create backup of current container
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            if docker ps -a | grep -q rust-webapp; then
              docker rename rust-webapp rust-webapp_backup_$TIMESTAMP
            fi

            # Run new container
            docker run -d \
              --name rust-webapp \
              --restart always \
              -p 8080:8080 \
              -v /opt/rust-webapp/config:/app/config \
              -e RUST_LOG=info \
              ${{ env.FULL_IMAGE_NAME }}

            # Verify new container is running
            if ! docker ps | grep -q rust-webapp; then
              echo "New container failed to start. Rolling back..."
              docker stop rust-webapp || true
              docker rm rust-webapp || true
              docker rename rust-webapp_backup_$TIMESTAMP rust-webapp
              docker start rust-webapp
              exit 1
            fi

            # Clean up old container after successful deployment
            docker rm rust-webapp_backup_$TIMESTAMP || true

            # Update Nginx configuration if needed
            if [ -f "docker/nginx.conf" ]; then
              sudo cp docker/nginx.conf /etc/nginx/conf.d/rust-webapp.conf
              sudo nginx -t && sudo systemctl reload nginx
            fi

            # Verify application health
            for i in {1..12}; do
              if curl -s http://localhost:8080/health | grep -q "healthy"; then
                echo "Application is healthy"
                exit 0
              fi
              echo "Waiting for application to become healthy..."
              sleep 5
            done
            echo "Application failed health check"
            exit 1
